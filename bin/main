#!/usr/bin/env php
<?php

/*
 * This file is part of gpupo/submarino-sdk
 *
 * (c) Gilmar Pupo <contact@gpupo.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

require dirname(__DIR__).'/config/bootstrap.php';

use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Gpupo\SubmarinoSdk\Factory;


$app = new Application();

$app->register('credential')
->setDescription('Testa a validade de suas credenciais')
->setDefinition([
       new InputOption('token', null, InputOption::VALUE_REQUIRED),
       new InputOption('sslVersion', 'SecureTransport', InputOption::VALUE_REQUIRED),
       new InputOption('apiVersion', 'api', InputOption::VALUE_REQUIRED),
   ])
->setCode(function (InputInterface $input, OutputInterface $output) use ($app) {
    $dialog = $app->getHelperSet()->get('dialog');

    $getParameter = function ($key, $extra = '') use ($input, $dialog, $output) {
        if ($input->getOption($key)) {
            return $input->getOption($key);
        } else {
            return  $dialog->ask($output, $key.$extra.': ');
        }
    };

    $token = $getParameter('token');
    $sslVersion = $getParameter('sslVersion',  '(default SecureTransport)');

    if ($input->getOption('apiVersion')) {
        $version = $input->getOption('apiVersion');
    } else {
        $versions = ['sandbox', 'marketplace'];
        $version = $dialog->askAndValidate($output, 'Version ([marketplace, sandbox (default)]): ', function ($version) use ($versions) {
           if (!in_array($version, array_values($versions))) {
               throw new \InvalidArgumentException(sprintf('Version "%s" is invalid.', $version));
           }

           return $version;
        }, false, 'sandbox');
    }

    $options = [
        'token'         => $token,
        'version'       => $version,
        'verbose'       => true,
        'sslVersion'    => $sslVersion,
    ];

    $log = new Logger('credential');
    $log->pushHandler(new StreamHandler('php://stdout', Logger::INFO));

    $factory = Factory::getInstance();
    $factory->setup($options, $log);

    $productManager = $factory->factoryManager('product');

    $list = $productManager->fetch();

    if ($list) {
        $output->writeln('<info>Success!</info>');
    } else {
        $output->writeln('<error>Error</error>');
    }

});

$app->run();
